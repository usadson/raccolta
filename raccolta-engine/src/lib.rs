// Copyright (C) 2023 Tristan Gerritsen <tristan@thewoosh.org>
// All Rights Reserved.

use std::{
    borrow::Cow,
    fmt::Debug,
};

use raccolta_syntax::statement::SqlExecutableStatement;

/// The main entrypoint for the SQL/RDBMS engine for Raccolta, which executes
/// the parsed statements by `raccolta-syntax`.
#[derive(Debug)]
pub struct Engine {

}

impl Engine {
    /// Creates a new instance of the engine.
    pub fn new() -> Self {
        Self {
        }
    }

    pub fn execute_statement(&mut self, statement: SqlExecutableStatement) -> EngineResult {
        _ = statement;
        EngineResult {
            messages: vec![EngineMessage::Informational("Welcome to the Raccolta Engine!".into())],
            row_count: 0,
            row_iterator: Box::new(std::iter::empty()),
        }
    }
}


#[derive(Clone, Debug, PartialEq)]
pub struct EngineRow {

}

#[derive(Clone, Debug, PartialEq)]
pub enum EngineMessage {
    Error(Cow<'static, str>),
    Help(Cow<'static, str>),
    Hint(Cow<'static, str>),
    Informational(Cow<'static, str>),
}

/// The result of invoked statements.
pub struct EngineResult {
    /// Messages generated by the engine.
    pub messages: Vec<EngineMessage>,

    pub row_count: usize,
    pub row_iterator: Box<dyn Iterator<Item = EngineRow>>,
}
